CREATE DATABASE IF NOT EXISTS Feedora;
USE Feedora;

-- Table: USERS
CREATE TABLE USERS (
   USER_ID INTEGER NOT NULL AUTO_INCREMENT,
   NAME VARCHAR(255) NULL,
   EMAIL VARCHAR(255) NULL UNIQUE,
   PASSWORD_HASH VARCHAR(255) NULL,
   CREATED_AT TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
   LAST_LOGIN_AT TIMESTAMP NULL,
   LAST_LOGOUT_AT TIMESTAMP NULL,
   DATETIME TIMESTAMP NULL,
   DATETIME_STORIES TIMESTAMP NULL,
   DATE_CREATION TIMESTAMP NULL,
   TYPE SMALLINT NULL,
   PROFILE_IMAGE VARCHAR(255) NULL,
   BANNER_IMAGE VARCHAR(255) NULL DEFAULT 'images/default-banner.jpg',
   PRIMARY KEY (USER_ID)
);

-- Table: CATEGORIE
CREATE TABLE CATEGORIE (
   ID_CATEGORIE INTEGER NOT NULL AUTO_INCREMENT,
   NAME_CATEGORIE TEXT NULL,
   PRIMARY KEY (ID_CATEGORIE)
);

-- Insert default categories
INSERT INTO CATEGORIE (NAME_CATEGORIE) VALUES 
('Appetizers'),
('Main Course'),
('Desserts'),
('Beverages'),
('Salads'),
('Soups'),
('Breakfast'),
('Snacks');

-- Table: RECIPES
CREATE TABLE RECIPES (
   RECIPES_ID INTEGER NOT NULL AUTO_INCREMENT,
   USER_ID INTEGER NOT NULL,
   ID_CATEGORIE INTEGER NULL,
   TITLE TEXT NULL,
   PHOTO_URL TEXT NULL,
   INSTRUCTIONS TEXT NULL,
   PREP_TIME_MINUTES DECIMAL NULL,
   COOK_TIME_MINUTES DECIMAL NULL,
   SERVINGS DECIMAL NULL,
   PRIMARY KEY (RECIPES_ID),
   FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
   FOREIGN KEY (ID_CATEGORIE) REFERENCES CATEGORIE(ID_CATEGORIE) ON DELETE SET NULL
);

-- Table: INGREDIENTS
CREATE TABLE INGREDIENTS (
   INGREDIENTS_ID INTEGER NOT NULL AUTO_INCREMENT,
   NAME TEXT NULL,
   PRIMARY KEY (INGREDIENTS_ID)
);

-- Table: UNIT
CREATE TABLE UNIT (
   UNIT_ID INTEGER NOT NULL AUTO_INCREMENT,
   UNIT_NAME TEXT NULL,
   PRIMARY KEY (UNIT_ID)
);

-- Insert default units
INSERT INTO UNIT (UNIT_NAME) VALUES 
('cups'),
('tablespoons'),
('teaspoons'),
('ounces'),
('pounds'),
('grams'),
('liters'),
('milliliters'),
('pieces'),
('pinch');

-- Table: COLLECT (User's favorite recipes)
CREATE TABLE COLLECT (
   USER_ID INTEGER NOT NULL,
   RECIPES_ID INTEGER NOT NULL,
   DATE_COLLECT TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
   PRIMARY KEY (USER_ID, RECIPES_ID),
   FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
   FOREIGN KEY (RECIPES_ID) REFERENCES RECIPES(RECIPES_ID) ON DELETE CASCADE
);

-- Table: DIFFICULTY
CREATE TABLE DIFFICULTY (
   DIFFICULTY_ID INTEGER NOT NULL AUTO_INCREMENT,
   DIFFICULTY_NAME TEXT NULL,
   PRIMARY KEY (DIFFICULTY_ID)
);

-- Insert default difficulties
INSERT INTO DIFFICULTY (DIFFICULTY_NAME) VALUES 
('Easy'),
('Medium'),
('Hard'),
('Expert');

-- Table: DIFFICULTY_RECIPES
CREATE TABLE DIFFICULTY_RECIPES (
   DIFFICULTY_ID INTEGER NOT NULL,
   RECIPES_ID INTEGER NOT NULL,
   PRIMARY KEY (DIFFICULTY_ID, RECIPES_ID),
   FOREIGN KEY (DIFFICULTY_ID) REFERENCES DIFFICULTY(DIFFICULTY_ID) ON DELETE CASCADE,
   FOREIGN KEY (RECIPES_ID) REFERENCES RECIPES(RECIPES_ID) ON DELETE CASCADE
);

-- Table: RECIPE_INGREDIENTS
CREATE TABLE RECIPE_INGREDIENTS (
   RECIPES_ID INTEGER NOT NULL,
   INGREDIENTS_ID INTEGER NOT NULL,
   PRIMARY KEY (RECIPES_ID, INGREDIENTS_ID),
   FOREIGN KEY (RECIPES_ID) REFERENCES RECIPES(RECIPES_ID) ON DELETE CASCADE,
   FOREIGN KEY (INGREDIENTS_ID) REFERENCES INGREDIENTS(INGREDIENTS_ID) ON DELETE CASCADE
);

-- Table: INGREDIENTS_UNIT
CREATE TABLE INGREDIENTS_UNIT (
   INGREDIENTS_ID INTEGER NOT NULL,
   UNIT_ID INTEGER NOT NULL,
   QUANTITY DECIMAL NULL,
   PRIMARY KEY (INGREDIENTS_ID, UNIT_ID),
   FOREIGN KEY (INGREDIENTS_ID) REFERENCES INGREDIENTS(INGREDIENTS_ID) ON DELETE CASCADE,
   FOREIGN KEY (UNIT_ID) REFERENCES UNIT(UNIT_ID) ON DELETE CASCADE
);

-- Table: POSTS
CREATE TABLE POSTS (
   POSTS_ID INTEGER NOT NULL AUTO_INCREMENT,
   USER_ID INTEGER NOT NULL,
   IMAGE_URL TEXT NULL,
   DESCRIPTION TEXT NULL,
   CREATED_AT TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
   PRIMARY KEY (POSTS_ID),
   FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);
-- Create POST_REACTIONS table
CREATE TABLE IF NOT EXISTS POST_REACTIONS (
   REACTION_ID INTEGER NOT NULL AUTO_INCREMENT,
   POST_ID INTEGER NOT NULL,
   USER_ID INTEGER NOT NULL,
   REACTION_TYPE VARCHAR(50) NOT NULL, -- 'yummy', 'delicious', 'tasty', 'love', 'amazing'
   REACTION_EMOJI VARCHAR(10) NOT NULL, -- Store the emoji for display
   CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
   PRIMARY KEY (REACTION_ID),
   UNIQUE KEY unique_user_post_reaction (POST_ID, USER_ID), -- One reaction per user per post
   FOREIGN KEY (POST_ID) REFERENCES POSTS(POSTS_ID) ON DELETE CASCADE,
   FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_post_reactions_post_id ON POST_REACTIONS(POST_ID);
CREATE INDEX IF NOT EXISTS idx_post_reactions_user_id ON POST_REACTIONS(USER_ID);
CREATE INDEX IF NOT EXISTS idx_post_reactions_type ON POST_REACTIONS(REACTION_TYPE);

-- Create a view for easy reaction counting
CREATE OR REPLACE VIEW POST_REACTION_COUNTS AS
SELECT 
    p.POSTS_ID,
    COALESCE(COUNT(pr.REACTION_ID), 0) as total_reactions,
    COALESCE(SUM(CASE WHEN pr.REACTION_TYPE = 'yummy' THEN 1 ELSE 0 END), 0) as yummy_count,
    COALESCE(SUM(CASE WHEN pr.REACTION_TYPE = 'delicious' THEN 1 ELSE 0 END), 0) as delicious_count,
    COALESCE(SUM(CASE WHEN pr.REACTION_TYPE = 'tasty' THEN 1 ELSE 0 END), 0) as tasty_count,
    COALESCE(SUM(CASE WHEN pr.REACTION_TYPE = 'love' THEN 1 ELSE 0 END), 0) as love_count,
    COALESCE(SUM(CASE WHEN pr.REACTION_TYPE = 'amazing' THEN 1 ELSE 0 END), 0) as amazing_count
FROM POSTS p
LEFT JOIN POST_REACTIONS pr ON p.POSTS_ID = pr.POST_ID
GROUP BY p.POSTS_ID;

-- Insert some sample data for testing (optional)
-- INSERT INTO POST_REACTIONS (POST_ID, USER_ID, REACTION_TYPE, REACTION_EMOJI) 
-- VALUES 
-- (1, 1, 'yummy', 'üçî'),
-- (1, 2, 'delicious', 'üçï'),
-- (2, 1, 'love', 'üç≤');

-- Table: NOTIFICATIONS
CREATE TABLE NOTIFICATIONS (
   NOTIFICATION_ID INTEGER NOT NULL AUTO_INCREMENT,
   USER_ID INTEGER NOT NULL,
   TARGET_USER_ID INTEGER NULL,
   NOTIFICATION_TYPE VARCHAR(50) NOT NULL,
   CONTENT TEXT NULL,
   RELATED_ID INTEGER NULL,
   IS_READ BOOLEAN DEFAULT FALSE,
   CREATED_AT TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
   PRIMARY KEY (NOTIFICATION_ID),
   FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
   FOREIGN KEY (TARGET_USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- Table: STORIES
CREATE TABLE IF NOT EXISTS STORIES (
   STORIES_ID INTEGER NOT NULL AUTO_INCREMENT,
   USER_ID INTEGER NOT NULL,
   IMAGE_URL TEXT NULL,
   CREATED_AT TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
   EXPIRES_AT TIMESTAMP NULL DEFAULT (CURRENT_TIMESTAMP + INTERVAL 24 HOUR),
   VISIBILITY TEXT NULL DEFAULT 'public',
   PRIMARY KEY (STORIES_ID),
   FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- Table: STORY_VIEWS
CREATE TABLE IF NOT EXISTS STORY_VIEWS (
   VIEW_ID INTEGER NOT NULL AUTO_INCREMENT,
   STORY_ID INTEGER NOT NULL,
   VIEWER_ID INTEGER NOT NULL,
   VIEWED_AT TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
   PRIMARY KEY (VIEW_ID),
   UNIQUE KEY (STORY_ID, VIEWER_ID),
   FOREIGN KEY (STORY_ID) REFERENCES STORIES(STORIES_ID) ON DELETE CASCADE,
   FOREIGN KEY (VIEWER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);


-- Table: MESSAGES
CREATE TABLE IF NOT EXISTS MESSAGES (
   MESSAGE_ID INT AUTO_INCREMENT PRIMARY KEY,
   SENDER_ID INT NOT NULL,
   RECEIVER_ID INT NOT NULL,
   CONTENT TEXT,
   IMAGE_URL TEXT,
   REACTIONS JSON,
   SENT_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (SENDER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
   FOREIGN KEY (RECEIVER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- Add index for faster message retrieval
CREATE INDEX idx_messages_sender ON MESSAGES(SENDER_ID);
CREATE INDEX idx_messages_receiver ON MESSAGES(RECEIVER_ID);
CREATE INDEX idx_messages_sent_at ON MESSAGES(SENT_AT);

-- Add index for conversation queries (finding messages between two users)
CREATE INDEX idx_messages_conversation ON MESSAGES(SENDER_ID, RECEIVER_ID);

-- Sample data for testing (optional, can be removed for production)
-- INSERT INTO MESSAGES (SENDER_ID, RECEIVER_ID, CONTENT, REACTIONS) VALUES 
-- (1, 2, 'Hello! How are you?', '{"likes": 0, "hearts": 0}'),
-- (2, 1, 'I am good, thanks for asking!', '{"likes": 1, "hearts": 0}'),
-- (1, 2, 'Have you tried my new recipe?', '{"likes": 0, "hearts": 1}');

-- Create USER_SESSIONS table for tracking online/offline status
CREATE TABLE IF NOT EXISTS USER_SESSIONS (
   SESSION_ID INTEGER NOT NULL AUTO_INCREMENT,
   USER_ID INTEGER NOT NULL,
   LAST_ACTIVITY TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
   PRIMARY KEY (SESSION_ID),
   FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- Create indexes for faster queries
CREATE INDEX idx_user_sessions_last_activity ON USER_SESSIONS(LAST_ACTIVITY);
CREATE INDEX idx_user_sessions_user_id ON USER_SESSIONS(USER_ID);

-- Insert sample data for testing
INSERT INTO USERS (NAME, EMAIL, PASSWORD_HASH) VALUES 
('John Doe', 'john@example.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi'),
('Jane Smith', 'jane@example.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi');

INSERT INTO RECIPES (USER_ID, ID_CATEGORIE, TITLE, INSTRUCTIONS, PREP_TIME_MINUTES, COOK_TIME_MINUTES, SERVINGS) VALUES 
(1, 2, 'Classic Spaghetti Carbonara', 'Step 1: Cook spaghetti according to package directions.\nStep 2: In a bowl, whisk together eggs, cheese, and pepper.\nStep 3: Cook bacon until crispy.\nStep 4: Combine hot pasta with egg mixture and bacon.\nStep 5: Serve immediately with extra cheese.', 15, 20, 4),
(2, 3, 'Chocolate Chip Cookies', 'Step 1: Preheat oven to 375¬∞F.\nStep 2: Mix butter, sugars, and vanilla.\nStep 3: Add eggs one at a time.\nStep 4: Mix in flour, baking soda, and salt.\nStep 5: Fold in chocolate chips.\nStep 6: Bake for 9-11 minutes.', 20, 11, 24);

-- Create FOLLOWERS table if it doesn't exist
CREATE TABLE IF NOT EXISTS FOLLOWERS (
   ID INTEGER NOT NULL AUTO_INCREMENT,
   USER_ID INTEGER NOT NULL,
   FOLLOWER_ID INTEGER NOT NULL,
   FOLLOWED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   PRIMARY KEY (ID),
   UNIQUE KEY (USER_ID, FOLLOWER_ID),
   FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
   FOREIGN KEY (FOLLOWER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

-- Add indexes for faster queries
CREATE INDEX IF NOT EXISTS idx_followers_user_id ON FOLLOWERS(USER_ID);
CREATE INDEX IF NOT EXISTS idx_followers_follower_id ON FOLLOWERS(FOLLOWER_ID);


CREATE TABLE IF NOT EXISTS COMMENTS (
    COMMENT_ID INT AUTO_INCREMENT PRIMARY KEY,
    POST_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    COMMENT_TEXT TEXT NULL,
    HAS_REACTION BOOLEAN DEFAULT FALSE,
    REACTION_TYPE VARCHAR(20) NULL,
    REACTION_EMOJI VARCHAR(5) NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (POST_ID) REFERENCES POSTS(POSTS_ID) ON DELETE CASCADE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);